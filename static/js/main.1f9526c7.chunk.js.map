{"version":3,"sources":["components/FilterButton/FilterButton.module.css","components/UniversalButton/Button.tsx","components/EditableSpan.tsx","components/TasksLIst/TasksLIst.tsx","components/FilterButton/FilterButton.tsx","components/Todolist/TodolistTitle.tsx","components/Input/Input.tsx","components/AddItemForm.tsx","components/Todolist/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","name","callback","filter","nameLowerCase","toLowerCase","className","s","active","onClick","EditableSpan","title","useState","edit","setEdit","newTitle","setNewTitle","onChange","event","currentTarget","value","onBlur","autoFocus","onDoubleClick","TasksLIst","tasks","removeTask","todolistId","changeStatus","updateTaskTitle","map","t","key","id","isDone","checked","type","taskId","onChangeTitleHandler","removeTaskHandler","FilterButton","changeFilter","onClickFilterHandler","TodolistTitle","removeTodolist","updateTodolistTitle","style","display","onClickHandler","Input","setTask","task","error","onClickAddTask","setError","onKeyPress","e","AddItemForm","trim","Todolist","addTask","todolistId1","v1","todolistId2","App","todolists","setTodolists","setTasks","tl","newTask","newId","filteredTask","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1f9526c7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"FilterButton_active__3AvOA\"};","import React, {FC} from 'react';\r\nimport s from './../FilterButton/FilterButton.module.css'\r\nimport {FilterType} from \"../../App\";\r\n\r\ntype ButtonType = {\r\n    name: string\r\n    callback: () => void\r\n    filter?: FilterType\r\n}\r\n\r\n\r\nexport const Button: FC<ButtonType> = ({name, callback, filter}) => {\r\n\r\n    const nameLowerCase = name.toLowerCase()\r\n\r\n    const onClickButtonHandler = () => {\r\n        callback()\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className={filter === nameLowerCase ? s.active : ''}\r\n            onClick={onClickButtonHandler}>{name}</button>\r\n    );\r\n};","import React, {ChangeEvent, FC, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callback:(newTitle:string)=>void\r\n}\r\nexport const EditableSpan: FC<EditableSpanPropsType> = (\r\n    {\r\n        title,callback\r\n    }\r\n) => {\r\n    let [edit, setEdit] = useState(false)\r\n    let [newTitle, setNewTitle] = useState('')\r\n\r\n\r\n    const activateEdit = () => {\r\n        setEdit(true)\r\n        setNewTitle(title)\r\n    }\r\n    const activateView = () => {\r\n        setEdit(false)\r\n        callback(newTitle)\r\n    }\r\n    const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(event.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        edit\r\n            ? <input onChange={onChangeInputHandler} value={newTitle} onBlur={activateView} autoFocus/>\r\n            : <span onDoubleClick={activateEdit}> {title} </span>\r\n    )\r\n}","import React, {ChangeEvent, FC} from 'react';\r\nimport {TaskType} from \"../../App\";\r\nimport {Button} from \"../UniversalButton/Button\";\r\nimport {EditableSpan} from \"../EditableSpan\";\r\n\r\ntype TasksLIstType = {\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistId: string, id: string) => void\r\n    changeStatus: (todolistId: string, id: string, isDone: boolean) => void\r\n    todolistId: string\r\n    updateTaskTitle:(todolistId:string,title:string,taskId:string)=>void\r\n}\r\nexport const TasksLIst: FC<TasksLIstType> = (\r\n    {\r\n        tasks, removeTask,\r\n        todolistId, changeStatus,\r\n        updateTaskTitle,\r\n    }\r\n) => {\r\n\r\n    const removeTaskHandler = (todolistId: string, id: string) => removeTask(todolistId, id)\r\n    const onChangeTitleHandler = (title: string,taskId:string) => {\r\n        updateTaskTitle(todolistId,title,taskId)\r\n    }\r\n    return (\r\n        <ul>\r\n            {tasks.map(t => {\r\n                const onChangeStatusHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n                    changeStatus(todolistId, t.id, event.currentTarget.checked)\r\n                }\r\n                return (\r\n                    <li key={t.id} className={t.isDone === true ? 'is-done' : ''}>\r\n                        <input\r\n                            onChange={onChangeStatusHandler}\r\n                            type=\"checkbox\"\r\n                            checked={t.isDone}\r\n                        />\r\n                        <EditableSpan\r\n                            title={t.title}\r\n                            callback={(title:string)=>onChangeTitleHandler(title,t.id)}\r\n                        />\r\n                        <Button\r\n                            callback={() => removeTaskHandler(todolistId, t.id)}\r\n                            name={'x'}\r\n                        />\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    );\r\n};","import React, {FC} from 'react';\r\nimport {FilterType} from \"../../App\";\r\nimport {Button} from \"../UniversalButton/Button\";\r\n\r\ntype FilterButtonType = {\r\n    changeFilter: (todolistId: string, value: FilterType) => void\r\n    filter: FilterType\r\n    todolistId: string\r\n}\r\nexport const FilterButton: FC<FilterButtonType> = ({changeFilter, todolistId, filter}) => {\r\n\r\n    const onClickFilterHandler = (value: FilterType) => {\r\n        changeFilter(todolistId, value)\r\n    }\r\n    return (\r\n        <div>\r\n            <Button\r\n                filter={filter}\r\n                callback={() => onClickFilterHandler('all')}\r\n                name={'All'}/>\r\n            <Button\r\n                filter={filter}\r\n                callback={() => onClickFilterHandler('active')}\r\n                name={'Active'}/>\r\n            <Button\r\n                filter={filter}\r\n                callback={() => onClickFilterHandler('completed')}\r\n                name={'Completed'}/>\r\n        </div>\r\n    );\r\n};","import React, {FC} from 'react';\r\nimport {Button} from \"../UniversalButton/Button\";\r\nimport {EditableSpan} from \"../EditableSpan\";\r\n\r\ntype TodolistHeaderType = {\r\n    title: string\r\n    todolistId: string\r\n    removeTodolist: (todolistId: string) => void\r\n    updateTodolistTitle: (todolistId: string, title: string) => void\r\n}\r\nexport const TodolistTitle: FC<TodolistHeaderType> = (\r\n    {\r\n        title, removeTodolist,\r\n        todolistId, updateTodolistTitle,\r\n    }\r\n) => {\r\n    const onClickHandler = (todolistId: string) => {\r\n        removeTodolist(todolistId)\r\n    }\r\n    const container = {\r\n        display: 'flex'\r\n    }\r\n    const updateTodolistHandler = (title: string) => {\r\n        updateTodolistTitle(todolistId, title)\r\n    }\r\n    return (\r\n        <div style={container}>\r\n            <h3>\r\n                <EditableSpan\r\n                    title={title}\r\n                    callback={updateTodolistHandler}\r\n                />\r\n            </h3>\r\n            <Button\r\n                name={'x'}\r\n                callback={() => onClickHandler(todolistId)}\r\n            />\r\n        </div>\r\n    );\r\n};","import React, {ChangeEvent, FC, KeyboardEvent} from 'react';\r\n\r\ntype InputType = {\r\n    task: string\r\n    setTask: (task: string) => void\r\n    error: string\r\n    setError: (error: string) => void\r\n    onClickAddTask: () => void\r\n}\r\n\r\nexport const Input: FC<InputType> = (\r\n    {\r\n        setTask,\r\n        task,\r\n        error,\r\n        onClickAddTask,\r\n        setError,\r\n    }\r\n) => {\r\n\r\n    const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTask(event.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError('')\r\n        if (e.key === 'Enter') {\r\n            onClickAddTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <input\r\n            className={error ? 'error' : ''}\r\n            onKeyPress={onKeyPressHandler}\r\n            value={task}\r\n            onChange={onChangeInputHandler}\r\n        />\r\n    );\r\n};","import React, {FC, useState} from \"react\";\r\nimport {Input} from \"./Input/Input\";\r\nimport {Button} from \"./UniversalButton/Button\";\r\n\r\ntype AddItemFormPropsType = {\r\n    callback: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm: FC<AddItemFormPropsType> = (\r\n    {\r\n        callback,\r\n    }\r\n) => {\r\n    let [task, setTask] = useState('')\r\n    let [error, setError] = useState('')\r\n\r\n    const onClickAddTask = () => {\r\n        if (task.trim() !== \"\") {\r\n            callback(task.trim())\r\n            setTask(\"\")\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Input\r\n                onClickAddTask={onClickAddTask}\r\n                setError={setError}\r\n                error={error}\r\n                task={task}\r\n                setTask={setTask}\r\n            />\r\n            <Button\r\n                name={'+'}\r\n                callback={onClickAddTask}\r\n            />\r\n            {error && <div className={'error-message'}>{error}</div>}\r\n        </div>\r\n    )\r\n}","import React, {FC, useState} from 'react';\r\nimport {FilterType, TaskType} from \"../../App\";\r\nimport {TodolistHeader} from \"./TodolistHeader/TodolistHeader\";\r\nimport {Input} from \"../Input/Input\";\r\nimport {Button} from \"../UniversalButton/Button\";\r\nimport {TasksLIst} from \"../TasksLIst/TasksLIst\";\r\nimport {FilterButton} from \"../FilterButton/FilterButton\";\r\nimport {TodolistTitle} from \"./TodolistTitle\";\r\nimport {AddItemForm} from \"../AddItemForm\";\r\n\r\ntype TodolistType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistId: string, id: string) => void\r\n    changeFilter: (todolistId: string, value: FilterType) => void\r\n    addTask: (todolistId: string, title: string) => void\r\n    changeStatus: (todolistId: string, id: string, isDone: boolean) => void\r\n    filter: FilterType\r\n    todolistId: string\r\n    removeTodolist: (todolistId: string) => void\r\n    updateTaskTitle:(todolistId:string,title:string,taskId:string)=>void\r\n    updateTodolistTitle:(todolistId:string,title:string)=>void\r\n}\r\n\r\nexport const Todolist: FC<TodolistType> = (\r\n    {\r\n        title, tasks, removeTodolist,\r\n        changeFilter, removeTask,\r\n        addTask, changeStatus,\r\n        filter, todolistId,\r\n        updateTaskTitle,updateTodolistTitle,\r\n    }\r\n) => {\r\n\r\n    const addTaskHandler = (title: string) => {\r\n        addTask(todolistId, title)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TodolistTitle\r\n                todolistId={todolistId}\r\n                removeTodolist={removeTodolist}\r\n                title={title}\r\n                updateTodolistTitle={updateTodolistTitle}\r\n            />\r\n            <AddItemForm callback={addTaskHandler}/>\r\n            <TasksLIst\r\n                updateTaskTitle={updateTaskTitle}\r\n                todolistId={todolistId}\r\n                changeStatus={changeStatus}\r\n                tasks={tasks}\r\n                removeTask={removeTask}\r\n            />\r\n            <FilterButton\r\n                todolistId={todolistId}\r\n                filter={filter}\r\n                changeFilter={changeFilter}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from \"uuid\";\r\nimport {Todolist} from \"./components/Todolist/Todolist\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\n\r\nexport type TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nlet todolistId1 = v1()\r\nlet todolistId2 = v1()\r\n\r\nfunction App() {\r\n    let [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n        {id: todolistId1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistId2, title: 'What to buy', filter: 'active'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState({\r\n        [todolistId1]: [\r\n            {id: v1(), title: 'HTML/CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'React', isDone: false},\r\n            {id: v1(), title: 'React', isDone: false},\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: 'Water', isDone: false},\r\n            {id: v1(), title: 'Eat', isDone: true},\r\n        ],\r\n    })\r\n\r\n\r\n    const removeTask = (todolistId: string, id: string) => {\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].filter(t => t.id !== id)})\r\n    }\r\n    const changeFilter = (todolistId: string, value: FilterType) => {\r\n        setTodolists(todolists.map(tl => tl.id === todolistId ? {...tl, filter: value} : tl))\r\n    }\r\n    const addTask = (todolistId: string, title: string) => {\r\n        let newTask = {id: v1(), title, isDone: false}\r\n        setTasks({...tasks, [todolistId]: [newTask, ...tasks[todolistId]]})\r\n    }\r\n    const changeStatus = (todolistId: string, id: string, isDone: boolean) => {\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].map(t => t.id === id ? {...t, isDone} : t)})\r\n\r\n    }\r\n\r\n    const removeTodolist = (todolistId: string) => {\r\n        setTodolists(todolists.filter(tl => tl.id !== todolistId))\r\n    }\r\n    const addTodolistHandler = (title: string) => {\r\n        let newId = v1()\r\n        setTodolists([{id: newId, title, filter: 'all'}, ...todolists])\r\n        setTasks({...tasks, [newId]: []})\r\n    }\r\n    const updateTaskTitle = (todolistId: string, title: string, taskId: string) => {\r\n      setTasks({...tasks,[todolistId]:tasks[todolistId].map(t=>t.id===taskId?{...t,title}:t)})\r\n    }\r\n    const updateTodolistTitle = (todolistId: string, title: string) => {\r\n        setTodolists(todolists.map(tl=>tl.id===todolistId?{...tl,title}:tl))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm callback={addTodolistHandler}/>\r\n            {\r\n                todolists.map(tl => {\r\n\r\n                    let filteredTask = tasks[tl.id]\r\n                    if (tl.filter === 'active') {\r\n                        filteredTask = filteredTask.filter(t => t.isDone === false)\r\n                    }\r\n                    if (tl.filter === 'completed') {\r\n                        filteredTask = filteredTask.filter(t => t.isDone === true)\r\n                    }\r\n\r\n                    return (\r\n                        <Todolist\r\n                            removeTodolist={removeTodolist}\r\n                            key={tl.id}\r\n                            todolistId={tl.id}\r\n                            title={tl.title}\r\n                            tasks={filteredTask}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeStatus={changeStatus}\r\n                            filter={tl.filter}\r\n                            updateTaskTitle={updateTaskTitle}\r\n                            updateTodolistTitle={updateTodolistTitle}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}