{"version":3,"sources":["components/FilterButton/FilterButton.module.css","components/Input/Input.tsx","components/UniversalButton/Button.tsx","components/TasksLIst/TasksLIst.tsx","components/FilterButton/FilterButton.tsx","components/Todolist/TodolistTitle.tsx","components/Todolist/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Input","setTask","task","error","onClickAddTask","setError","className","onKeyPress","e","key","value","onChange","event","currentTarget","console","log","Button","name","callback","filter","nameLowerCase","toLowerCase","s","active","onClick","TasksLIst","tasks","removeTask","todolistId","changeStatus","map","t","id","isDone","checked","type","title","removeTaskHandler","FilterButton","changeFilter","onClickFilterHandler","TodolistTitle","removeTodolist","style","display","onClickHandler","Todolist","addTask","useState","trim","todolistId1","v1","todolistId2","App","todolists","setTodolists","setTasks","tl","newTask","filteredTask","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c1b71543.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"FilterButton_active__3nPec\"};","import React, {ChangeEvent, FC, KeyboardEvent} from 'react';\r\n\r\ntype InputType = {\r\n    task: string\r\n    setTask: (task: string) => void\r\n    error: string\r\n    setError: (error: string) => void\r\n    onClickAddTask: () => void\r\n}\r\n\r\nexport const Input: FC<InputType> = (\r\n    {\r\n        setTask,\r\n        task,\r\n        error,\r\n        onClickAddTask,\r\n        setError,\r\n    }\r\n) => {\r\n\r\n    const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTask(event.currentTarget.value)\r\n        console.log(event.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError('')\r\n        if (e.key === 'Enter') {\r\n            onClickAddTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <input\r\n            className={error ? 'error' : ''}\r\n            onKeyPress={onKeyPressHandler}\r\n            value={task}\r\n            onChange={onChangeInputHandler}\r\n        />\r\n    );\r\n};","import React, {FC} from 'react';\r\nimport s from './../FilterButton/FilterButton.module.css'\r\nimport {FilterType} from \"../../App\";\r\n\r\ntype ButtonType = {\r\n    name: string\r\n    callback: () => void\r\n    filter?: FilterType\r\n}\r\n\r\n\r\nexport const Button: FC<ButtonType> = ({name, callback, filter}) => {\r\n\r\n    const nameLowerCase = name.toLowerCase()\r\n\r\n    const onClickButtonHandler = () => {\r\n        callback()\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className={filter === nameLowerCase ? s.active : ''}\r\n            onClick={onClickButtonHandler}>{name}</button>\r\n    );\r\n};","import React, {ChangeEvent, FC} from 'react';\r\nimport {TaskType} from \"../../App\";\r\nimport {Button} from \"../UniversalButton/Button\";\r\n\r\ntype TasksLIstType = {\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistId: string, id: string) => void\r\n    changeStatus: (todolistId: string, id: string, isDone: boolean) => void\r\n    todolistId: string\r\n}\r\nexport const TasksLIst: FC<TasksLIstType> = ({tasks, removeTask, todolistId, changeStatus}) => {\r\n\r\n    const removeTaskHandler = (todolistId: string, id: string) => removeTask(todolistId, id)\r\n\r\n    return (\r\n        <ul>\r\n            {tasks.map(t => {\r\n                const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n                    changeStatus(todolistId, t.id, event.currentTarget.checked)\r\n                }\r\n                return (\r\n                    <li key={t.id} className={t.isDone === true ? 'is-done' : ''}>\r\n                        <input onChange={onChangeHandler} type=\"checkbox\" checked={t.isDone}/>\r\n                        {t.title}\r\n                        <Button callback={() => removeTaskHandler(todolistId, t.id)} name={'x'}/>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    );\r\n};","import React, {FC} from 'react';\r\nimport {FilterType} from \"../../App\";\r\nimport {Button} from \"../UniversalButton/Button\";\r\n\r\ntype FilterButtonType = {\r\n    changeFilter: (todolistId: string, value: FilterType) => void\r\n    filter: FilterType\r\n    todolistId: string\r\n}\r\nexport const FilterButton: FC<FilterButtonType> = ({changeFilter, todolistId, filter}) => {\r\n\r\n    const onClickFilterHandler = (value: FilterType) => {\r\n        changeFilter(todolistId, value)\r\n    }\r\n    return (\r\n        <div>\r\n            <Button\r\n                filter={filter}\r\n                callback={() => onClickFilterHandler('all')}\r\n                name={'All'}/>\r\n            <Button\r\n                filter={filter}\r\n                callback={() => onClickFilterHandler('active')}\r\n                name={'Active'}/>\r\n            <Button\r\n                filter={filter}\r\n                callback={() => onClickFilterHandler('completed')}\r\n                name={'Completed'}/>\r\n        </div>\r\n    );\r\n};","import React, {FC} from 'react';\r\nimport {Button} from \"../UniversalButton/Button\";\r\n\r\ntype TodolistHeaderType = {\r\n    title: string\r\n    todolistId: string\r\n    removeTodolist: (todolistId: string) => void\r\n}\r\nexport const TodolistTitle: FC<TodolistHeaderType> = (\r\n    {\r\n        title, removeTodolist,\r\n        todolistId,\r\n    }\r\n) => {\r\n    const onClickHandler = (todolistId: string) => {\r\n        removeTodolist(todolistId)\r\n    }\r\n    const container = {\r\n        display: 'flex'\r\n    }\r\n    return (\r\n        <div style={container}>\r\n            <h3>{title}</h3><Button name={'x'} callback={() => onClickHandler(todolistId)}/>\r\n        </div>\r\n    );\r\n};","import React, {FC, useState} from 'react';\r\nimport {FilterType, TaskType} from \"../../App\";\r\nimport {TodolistHeader} from \"./TodolistHeader/TodolistHeader\";\r\nimport {Input} from \"../Input/Input\";\r\nimport {Button} from \"../UniversalButton/Button\";\r\nimport {TasksLIst} from \"../TasksLIst/TasksLIst\";\r\nimport {FilterButton} from \"../FilterButton/FilterButton\";\r\nimport {TodolistTitle} from \"./TodolistTitle\";\r\n\r\ntype TodolistType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistId: string, id: string) => void\r\n    changeFilter: (todolistId: string, value: FilterType) => void\r\n    addTask: (todolistId: string, title: string) => void\r\n    changeStatus: (todolistId: string, id: string, isDone: boolean) => void\r\n    filter: FilterType\r\n    todolistId: string\r\n    removeTodolist: (todolistId: string) => void\r\n}\r\n\r\nexport const Todolist: FC<TodolistType> = (\r\n    {\r\n        title, tasks, removeTodolist,\r\n        changeFilter, removeTask,\r\n        addTask, changeStatus,\r\n        filter, todolistId,\r\n    }\r\n) => {\r\n    let [task, setTask] = useState('')\r\n    let [error, setError] = useState('')\r\n\r\n    const onClickAddTask = () => {\r\n        if (task.trim() !== \"\") {\r\n            addTask(todolistId, task.trim())\r\n            setTask(\"\")\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TodolistTitle\r\n                todolistId={todolistId}\r\n                removeTodolist={removeTodolist}\r\n                title={title}\r\n            />\r\n            <Input\r\n                onClickAddTask={onClickAddTask}\r\n                setError={setError}\r\n                error={error}\r\n                task={task}\r\n                setTask={setTask}\r\n            />\r\n            <Button\r\n                name={'+'}\r\n                callback={onClickAddTask}\r\n            />\r\n            {error && <div className={'error-message'}>{error}</div>}\r\n            <TasksLIst\r\n                todolistId={todolistId}\r\n                changeStatus={changeStatus}\r\n                tasks={tasks}\r\n                removeTask={removeTask}\r\n            />\r\n            <FilterButton\r\n                todolistId={todolistId}\r\n                filter={filter}\r\n                changeFilter={changeFilter}\r\n            />\r\n        </div>\r\n    );\r\n};","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from \"uuid\";\r\nimport {Todolist} from \"./components/Todolist/Todolist\";\r\n\r\nexport type TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nlet todolistId1 = v1()\r\nlet todolistId2 = v1()\r\n\r\nfunction App() {\r\n    let [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n        {id: todolistId1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistId2, title: 'What to buy', filter: 'active'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState({\r\n        [todolistId1]: [\r\n            {id: v1(), title: 'HTML/CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'React', isDone: false},\r\n            {id: v1(), title: 'React', isDone: false},\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: 'Water', isDone: false},\r\n            {id: v1(), title: 'Eat', isDone: true},\r\n        ],\r\n    })\r\n\r\n\r\n    const removeTask = (todolistId: string, id: string) => {\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].filter(t => t.id !== id)})\r\n    }\r\n    const changeFilter = (todolistId: string, value: FilterType) => {\r\n        setTodolists(todolists.map(tl => tl.id === todolistId ? {...tl, filter: value} : tl))\r\n    }\r\n    const addTask = (todolistId: string, title: string) => {\r\n        let newTask = {id: v1(), title, isDone: false}\r\n        setTasks({...tasks, [todolistId]: [newTask, ...tasks[todolistId]]})\r\n    }\r\n    const changeStatus = (todolistId: string, id: string, isDone: boolean) => {\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].map(t => t.id === id ? {...t, isDone} : t)})\r\n        // let task = tasks.find((t) => t.id === id)\r\n        // if (task) {\r\n        //     task.isDone = isDone\r\n        // }\r\n        // setTasks([...tasks])\r\n    }\r\n\r\n    const removeTodolist = (todolistId: string) => {\r\n        setTodolists(todolists.filter(tl => tl.id !== todolistId))\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                todolists.map(tl => {\r\n\r\n                    let filteredTask = tasks[tl.id]\r\n                    if (tl.filter === 'active') {\r\n                        filteredTask = filteredTask.filter(t => t.isDone === false)\r\n                    }\r\n                    if (tl.filter === 'completed') {\r\n                        filteredTask = filteredTask.filter(t => t.isDone === true)\r\n                    }\r\n\r\n                    return (\r\n                        <Todolist\r\n                            removeTodolist={removeTodolist}\r\n                            key={tl.id}\r\n                            todolistId={tl.id}\r\n                            title={tl.title}\r\n                            tasks={filteredTask}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeStatus={changeStatus}\r\n                            filter={tl.filter}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}